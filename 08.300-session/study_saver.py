'''    https://www.tensorflow.org/versions/r1.5/api_docs/python/tf/train/Saver    https://yq.aliyun.com/articles/228618    https://yq.aliyun.com/articles/228637?spm=5176.100239.blogcont228618.13.3661da7eOXgyMG'''import tensorflow as tfimport numpy as npimport matplotlib.pyplot as plt# 保存模型def study_save():    #  清空目前的图，防止变量重复    tf.reset_default_graph()    # Create placeholders for the x and y points    X = tf.placeholder("float")    Y = tf.placeholder("float")    # 初始化需要学习的参数    h_est = tf.Variable(0.0, name='hor_estimate')    v_est = tf.Variable(0.0, name='ver_estimate')    # y_est holds the estimated values on y-axis    y_est = tf.square(X - h_est) + v_est    # loss    cost = (tf.pow(Y - y_est, 2))    # update    trainop = tf.train.GradientDescentOptimizer(0.001).minimize(cost)    # Use some values for the horizontal and vertical shift    h = 1    v = -2    # 生成输入和噪声数据    x_train = np.linspace(-2,4,201)    noise = np.random.randn(x_train.shape[0]) * 0.4    y_train = (x_train - h) ** 2 + v + noise    # saver    saver = tf.train.Saver()    with tf.Session() as sess:        sess.run(tf.global_variables_initializer())        for i in range(100):            for (x, y) in zip(x_train, y_train):                # Feed actual data to the train operation                sess.run(trainop, feed_dict={X: x, Y: y})            # Create a checkpoint in every iteration            saver.save(sess, './model/test', global_step=i, )        h_est = sess.run(h_est)        v_est = sess.run(v_est)    print("h_est = {:.2}, v_est = {:.2}".format(h_est, v_est))    passdef study_restore():    # 恢复TensorFlow模型时要做的第一件事就是将图形结构从“.meta”文件加载到当前图形中。    tf.reset_default_graph()    imported_meta = tf.train.import_meta_graph("./model/test.meta")    with tf.Session() as sess:        imported_meta.restore(sess, tf.train.latest_checkpoint('./model'))        h_est2 = sess.run('hor_estimate:0')        v_est2 = sess.run('ver_estimate:0')        print("h_est: %.2f, v_est: %.2f" % (h_est2, v_est2))    passif __name__ == '__main__':    study_restore()    