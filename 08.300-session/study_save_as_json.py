'''    手动保存并还原到JSON'''import jsonimport numpy as npfrom sklearn.linear_model import LogisticRegressionfrom sklearn.datasets import load_irisfrom sklearn.model_selection import train_test_splitclass MyLogReg(LogisticRegression):    def __init__(self, C=1.0, solver='liblinear', max_iter=100, X_train=None, Y_train=None):        LogisticRegression.__init__(self, C=C, solver=solver, max_iter=max_iter)        self.X_train = X_train        self.Y_train = Y_train        pass    def save_json(self, filepath):        dict_ = {}        dict_['C'] = self.C        dict_['max_iter'] = self.max_iter        dict_['solver'] = self.solver        dict_['X_train'] = self.X_train.tolist() if self.X_train is not None else "None"        dict_['Y_train'] = self.Y_train.tolist() if self.Y_train is not None else 'None'        # Creat json and save to file        json_txt = json.dumps(dict_, indent=4)        with open(filepath, 'w') as file:            file.write(json_txt)        pass    def load_json(self, filepath):        with open(filepath, 'r') as file:            dict_ = json.load(file)        self.C = dict_['C']        self.max_iter = dict_['max_iter']        self.solver = dict_['solver']        self.X_train = np.asarray(dict_['X_train']) if dict_['X_train'] != 'None' else None        self.Y_train = np.asarray(dict_['Y_train']) if dict_['Y_train'] != 'None' else None        pass    passif __name__ == '__main__':    data = load_iris()    Xtrain, Xtest, Ytrain, Ytest = train_test_split(data.data, data.target, test_size=0.3, random_state=4)    filepath = 'mylogreg.json'    my_log_reg = MyLogReg(X_train=Xtrain, Y_train=Ytrain)    my_log_reg.save_json(filepath)    json_my_log_reg = MyLogReg()    json_my_log_reg.load_json(filepath)    print(json_my_log_reg)