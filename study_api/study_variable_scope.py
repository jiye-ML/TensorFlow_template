'''tf.variable_scope(name_or_scope,default_name=None,values=None,initializer=None)http://blog.csdn.net/eml_jw/article/details/72408306name_scope: name_scope对 get_variable()创建的变量 的名字不会有任何影响,而创建的op会被加上前缀.tf.get_variable_scope() 返回的只是 variable_scope,不管 name_scope.所以以后我们在使用tf.get_variable_scope().reuse_variables() 时可以无视name_scopehttp://blog.csdn.net/u012436149/article/details/53081454简单来看 1. 使用tf.Variable()的时候，tf.name_scope()和tf.variable_scope() 都会给 Variable 和 op 的 name属性加上前缀。 2. 使用tf.get_variable()的时候，tf.name_scope()就不会给 tf.get_variable()创建出来的Variable加前缀。'''import tensorflow as tfdef study_variable_scope():    # 如何创建新variable的简单示例：    with tf.variable_scope("foo"):        with tf.variable_scope("bar"):            v = tf.get_variable("v", [1])            assert v.name == "foo/bar/v:0"    # 共享variable的基本示例：    with tf.variable_scope("foo2"):        v = tf.get_variable("v", [1])    with tf.variable_scope("foo2", reuse=True):        v1 = tf.get_variable("v", [1])    assert v1 == v    # 通过捕获范围并设置重用来共享variable    with tf.variable_scope("foo3") as scope:        v = tf.get_variable("v", [1])        scope.reuse_variables()        v1 = tf.get_variable("v", [1])    assert v1 == v    passdef study_name_scope():    # name_scope 是给op_name加前缀, variable_scope是给get_variable()创建的变量的名字加前缀。    with tf.name_scope("name1"):        with tf.variable_scope("var1"):            w = tf.get_variable("w", shape=[2])            res = tf.add(w, [3])    print(w.name)    print(res.name)    # tf.name_scope(None) 有清除name scope的作用    with tf.name_scope("hehe"):        w1 = tf.Variable(1.0)        with tf.name_scope(None):            w2 = tf.Variable(2.0)    print(w1.name)    print(w2.name)    passif __name__ == '__main__':    study_name_scope()    pass