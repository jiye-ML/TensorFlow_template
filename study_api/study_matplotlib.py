'''    学习 matplotlib 图形库    https://morvanzhou.github.io/tutorials/data-manipulation/plt/3-2-Bar/'''import matplotlib.pyplot as pltimport numpy as npfrom mpl_toolkits.mplot3d import Axes3Dimport matplotlib.gridspec as gridspec'''  基本使用  '''# 开始def hello_world():    x = np.linspace(-1, 1, 50)    y = 2 * x + 1    plt.plot(x, y)    plt.show()# figuredef learn_figure():    x = np.linspace(-1, 1, 50)    y1 = 2 * x + 1    y2 = x**2    # 第一个界面    plt.figure()    plt.plot(x, y1)    # 第二个界面    plt.figure(num=3, figsize=(8, 5))    plt.plot(x, y2)    plt.plot(x, y1, color='red', linewidth=1.0, linestyle='--')    plt.show()#  坐标轴def learn_axis():    x = np.linspace(-1, 1, 50)    y2 = 2 * x + 1    plt.figure()    plt.plot(x, y2)    # 设置标尺    plt.xlim((-1, 2))    plt.ylim((-2, 3))    # 设置文字显示    plt.xlabel("i am x")    plt.ylabel("i am y")    # 设置坐标文字    new_ticks = np.linspace(-1, 2, 5)    plt.xticks(new_ticks)    plt.yticks([-2, -1.8, -1, 1.22, 3],               [r'$really\ bad$', r'$bad\ \alpha$', 'normal', 'good','real good'])    # gca = get current axis    # 改变坐标轴位置    ax = plt.gca()    ax.spines['right'].set_color('none')    ax.spines['top'].set_color('none')    ax.xaxis.set_ticks_position('bottom')    ax.yaxis.set_ticks_position('left')    ax.spines['bottom'].set_position(('data', 0))    ax.spines['left'].set_position(('data', 0))    plt.show()# legenddef learn_legend():    x = np.linspace(-1, 1, 50)    y2 = 2 * x + 1    y1 = x ** 2    plt.figure()    l1, = plt.plot(x, y1, label='up')    l2, = plt.plot(x, y2, color='red', linewidth=1.0, linestyle='--', label='down')    plt.legend(handles=[l1, l2], labels=['aaa', 'bbb'], loc='best')    plt.show()# 标注def learn_annotation():    x = np.linspace(-1, 1, 50)    y = 2 * x + 1    plt.plot(x, y)    x0 = 1    y0 = 2 * x0 + 1    # 画点    plt.scatter(x0, y0, s=50, color='b', )    # 划线    plt.plot([x0, x0], [y0, 0], 'k--', lw=2.5)    plt.annotate(r'$2x+1={}$'.format(y0), xy=(x0, y0), xycoords='data',                 xytext=(+30, -30), textcoords='offset points',                 fontsize=16, arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=.2'))    plt.text(-1, 0.5, r'$this\ is\ a\ text$',             fontdict={'size':16, 'color': 'red'})    plt.show()    pass# tickdef learn_tick():    x = np.linspace(-3, 3, 50)    y = 0.1 * x    plt.figure()    plt.plot(x, y, linewidth=10)    plt.ylim(-2, 2)    ax = plt.gca()    ax.spines['right'].set_color('none')    ax.spines['top'].set_color('none')    ax.xaxis.set_ticks_position('bottom')    ax.spines['bottom'].set_position(('data', 0))    ax.yaxis.set_ticks_position('left')    ax.spines['left'].set_position(('data', 0))    for label in ax.get_xticklabels() + ax.get_yticklabels():        label.set_fontsize(16)        label.set_bbox(dict(facecolor='white', edgecolor='None', alpha=0.7))    plt.show()    pass'''  画图种类  '''# scatterdef learn_scatter():    n = 1024    X = np.random.normal(0, 1, n)    Y = np.random.normal(0, 1, n)    #  颜色 , 只为了好看    T = np.arctan2(Y, X)    plt.scatter(X, Y, s=75, c=T, alpha=0.5)    plt.xlim((-1.5, 1.5))    plt.ylim((-1.5, 1.5))    plt.xticks(())    plt.yticks(())    plt.show()    pass# 柱状图def learn_bar():    n = 12    X = np.arange(n)    Y1 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)    Y2 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)    plt.bar(X, +Y1, facecolor='red', edgecolor='white')    plt.bar(X, -Y2)    for x, y in zip(X, Y1):        # ha: horizontal alignment        plt.text(x, y+0.05, '{:.2f}'.format(y), ha='center',va='bottom')    for x, y in zip(X, Y2):        # ha: horizontal alignment        plt.text(x, -y-0.05, '{:.2f}'.format(y), ha='center',va='top')    plt.xlim(-.5, n)    plt.xticks(())    plt.ylim(-1.25, 1.25)    plt.yticks(())    plt.show()    pass# 等高线def learn_contours():    def f(x, y):        # the height function        return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)    n = 256    x = np.linspace(-3, 3, n)    y = np.linspace(-3, 3, n)    X, Y = np.meshgrid(x, y)    # 等高图, 8 部分    plt.contourf(X, Y, f(X, Y), 8, alpha=0.75, cmap=plt.cm.hot)    # 等高线    C = plt.contour(X, Y, f(X, Y), 8, colors='black', linewidth=0.5)    plt.clabel(C, inline=True, fontsize=10)    plt.show()    pass# 图像def learn_image_2D():    a = np.array([0.313660827978, 0.365348418405, 0.423733120134,                  0.365348418405, 0.439599930621, 0.525083754405,                  0.423733120134, 0.525083754405, 0.651536351379]).reshape(3, 3)    # http://matplotlib.org/examples/images_contours_and_fields/interpolation_methods.html    plt.imshow(a, interpolation='nearest', cmap='bone', origin='upper')    plt.colorbar(shrink=0.9)    plt.show()    passdef learn_image_3D():    fig = plt.figure()    ax = Axes3D(fig)    # X, Y value    X = np.arange(-4, 4, 0.25)    Y = np.arange(-4, 4, 0.25)    X, Y = np.meshgrid(X, Y)  # x-y 平面的网格    R = np.sqrt(X ** 2 + Y ** 2)    # height value    Z = np.sin(R)    ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.get_cmap('rainbow'))    ax.contour(X, Y, Z, zdir='z',offset=-2, cmap='rainbow')    ax.set_zlim(-2, 2)    plt.show()    pass''' 多图合并显示 '''def learn_subplot():    plt.figure()    plt.subplot(2, 1, 1)    plt.plot([0,1], [0,1])    plt.subplot(2, 3, 4)    plt.plot([0,1], [0,1])    plt.subplot(2, 3, 5)    plt.plot([0,1], [0,4])    plt.show()    pass# method 1: subplot2griddef learn_subplot2grid():    plt.figure()    ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3, rowspan=1)    ax1.plot([1, 2], [1, 2])    ax1.set_title("ax1_title")    ax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)    ax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)    ax4 = plt.subplot2grid((3, 3), (2, 0))    ax5 = plt.subplot2grid((3, 3), (2, 1))    plt.show()    pass# method 2: gridspecdef learn_gridspec():    plt.figure()    gs = gridspec.GridSpec(3, 3)    ax1 = plt.subplot(gs[0, :])    ax2 = plt.subplot(gs[1, 0:2])    ax3 = plt.subplot(gs[1:, 2])    ax4 = plt.subplot(gs[-1, 0])    ax5 = plt.subplot(gs[-1, -2])    plt.show()# method 3 : easy to difine structuredef lear_subplots():    f, ((ax11, ax12),(ax21, ax22)) = plt.subplots(2, 2, sharex=True, sharey=True)    ax11.scatter([1, 2], [1, 2])    plt.tight_layout()    plt.show()# 图中图def learn():    # 初始化figure    fig = plt.figure()    # 创建数据    x = [1, 2, 3, 4, 5, 6, 7]    y = [1, 3, 4, 2, 5, 8, 6]    left, bottom, width, height = 0.1, 0.1, 0.8, 0.8    ax1 = fig.add_axes([left, bottom, width, height])    ax1.plot(x, y, 'r')    ax1.set_xlabel('x')    ax1.set_ylabel('y')    ax1.set_title('title')    left, bottom, width, height = 0.2, 0.6, 0.25, 0.25    ax2 = fig.add_axes([left, bottom, width, height])    ax2.plot(y, x, 'b')    ax2.set_xlabel('x')    ax2.set_ylabel('y')    ax2.set_title('title inside 1')    plt.axes([0.6, 0.2, 0.25, 0.25])    plt.plot(y[::-1], x, 'g')  # 注意对y进行了逆序处理    plt.xlabel('x')    plt.ylabel('y')    plt.title('title inside 2')    plt.show()# 次坐标def second_axis():    x = np.arange(0, 10, 0.1)    y1 = 0.05 * x ** 2    y2 = -1 * y1    fig, ax1 = plt.subplots()    # 镜面化    ax2 = ax1.twinx()    ax1.plot(x, y1, 'g-')    ax2.plot(x, y2, 'b-')    ax1.set_xlabel("X_data")    ax1.set_ylabel('Y1', color='g')    ax2.set_ylabel("Y2", color='b')    plt.show()if __name__ == '__main__':    second_axis()