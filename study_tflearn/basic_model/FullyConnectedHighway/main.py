import osimport tensorflow as tfimport numpy as npimport input_dataflags = tf.app.flagsFLAGS = flags.FLAGS# define flagsflags.DEFINE_boolean('skip-training', False, 'If true, skip training the model')flags.DEFINE_boolean('restore', False, 'If true, restore the model from the latest check')# define artifact directories where results from the session can be savedmodel_path = os.environ.get('MODEL_PATH', 'models/')checkpoint_path = os.environ.get('CHECKPOINT_PATH', 'checkpoints')summary_path = os.environ.get("SUMMSRY_PATH", 'logs/')mnist = input_data.read_data_sets('mnist', one_hot=True)def weight_bias(W_shape, b_shape, bias_init = 0.1):    W = tf.Variable(tf.truncated_normal(W_shape, stddev=0.1), name='weight')    b = tf.Variable(tf.constant(bias_init, shape=b_shape), name='bias')    return W, bdef dense_layer(x, W_shape, b_shape, activation):    W, b = weight_bias(W_shape, b_shape)    return activationdef highway_layer(x, size, activation, carry_bias = -1.0):    W, b = weight_bias([size, size], [size])    with tf.variable_scope('transform_gate'):        W_T, b_T = weight_bias([size, size], [size], bias_init=carry_bias)    H = activation(tf.matmul(x, W) + b, name='activation')    T = tf.sigmoid(tf.matmul(x, W_T) + b_T, name='transform_gate')    C = tf.sigmo