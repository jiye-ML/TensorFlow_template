'''    程序保存模型    会生成三个文件， 因为tenso 会将计算图的结构和图上参数取值分开保存        model.ckpt.meda 保存了 tensoflow 计算图的结构        model.ckpt 保存程序的每个变量取值        checkpoint 所有的模型文件列表'''import tensorflow as tffrom tensorflow.python.framework import graph_utilfrom tensorflow.python.platform import gfileclass save_restore_model:    def __init__(self):        pass    # save model    def save(self):        v1 = tf.Variable(tf.constant(1.0, shape=[1]), name='v1')        v2 = tf.Variable(tf.constant(2.0, shape=[1]), name='v2')        result = v1 + v2        saver = tf.train.Saver()        with tf.Session() as sess:            sess.run(tf.global_variables_initializer())            saver.save(sess, 'model/model.ckpt')    # get model    def get_model(self):        v1 = tf.Variable(tf.constant(1.0, shape=[1]), name='v1')        v2 = tf.Variable(tf.constant(2.0, shape=[1]), name='v2')        result = v1 + v2        saver = tf.train.Saver()        with tf.Session() as sess:            sess.run(tf.global_variables_initializer())            saver.restore(sess, 'model/model.ckpt')            print(sess.run(result))    def save_rename_variable_for_restore_model(self):        v = tf.Variable(0, dtype=tf.float32, name='v')        # 滑动窗口        ema = tf.train.ExponentialMovingAverage(0.99)        maintain_averages_op = ema.apply(tf.all_variables())        for variables in tf.all_variables():            print(variables.name)        saver = tf.train.Saver()        with tf.Session() as sess:            sess.run(tf.global_variables_initializer())            sess.run(tf.assign(v, 10))            sess.run(maintain_averages_op)            saver.save(sess, 'model/model.ckpt')    def get_rename_variable_for_restore_model(self):        v = tf.Variable(0, dtype=tf.float32, name='v')        saver = tf.train.Saver({"v/ExponentialMovingAverage": v})        with tf.Session() as sess:            saver.restore(sess, 'model/model.ckpt')            print(sess.run(v))    def get_rename_variable_for_restore_model2(self):        v = tf.Variable(0, dtype=tf.float32, name='v')        ema = tf.train.ExponentialMovingAverage(0.99)        saver = tf.train.Saver(ema.variables_to_restore())        with tf.Session() as sess:            saver.restore(sess, 'model/model.ckpt')            print(sess.run(v))    # 将计算图中的变量及取值通过常量的方式保存    def save_model_to_union_file(self):        v1 = tf.Variable(tf.constant(1.0, shape=[1]), name='v1')        v2 = tf.Variable(tf.constant(2.0, shape=[1]), name='v2')        result = v1 + v2        with tf.Session() as sess:            sess.run(tf.global_variables_initializer())            # 导出当前图的GraphDef部分， 只需要这一部分就可以完成从输入层到输出层的计算过程            graph_def = tf.get_default_graph().as_graph_def()            output_graph_def = graph_util.convert_variables_to_constants(sess, graph_def, ['add'])            with tf.gfile.GFile('model/combined_model.pb', 'wb') as f:                f.write(output_graph_def.SerializeToString())    def get_model_to_union_file(self):        with tf.Session() as sess:            model_filename = 'model/combined_model.pb'            # 读取保存的模型文件，            with gfile.FastGFile(model_filename, 'rb') as f:                graph_def = tf.GraphDef()                graph_def.ParseFromString(f.read())            result = tf.import_graph_def(graph_def, return_elements=["add:0"])            print(sess.run(result))if __name__ == '__main__':    pass