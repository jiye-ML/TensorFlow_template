import tensorflow as tffrom tensorflow.contrib import rnnimport numpy as npclass ToySequenceData(object):    def __init__(self, n_samples=1000, max_seq_len=20, min_seq_len=3, max_value=1000):        self._data = []        self._labels = []        self._seqlen = []        for i in range(n_samples):            len = random.randint(min_seq_len, max_seq_len)            self._seqlen.append(len)            # add a random or linear int sequence            if random.random() < 0.5:                # generate a linear sequence                rand_start = random.randint(0, max_value - len)                s = [[float(i) / max_value] for i in range(rand_start, rand_start + len)]                s += [[0.] for i in range(max_seq_len - len)]                self._data.append(s)                self._labels.append([1., 0.])            else:                # generate a random sequence                s = [[float(random.randint(0, max_value))/max_value] for i in range(len)]                s += [[0.] for i in range(max_seq_len - len)]                self._data.append(s)                self._labels.append([0., 1.])        self._batch_id = 0    def next(self, batch_size):        if self._batch_id == len(self._data):            self._batch_id = 0        batch_data = (self._data[self._batch_id:min(self._batch_id + batch_size, len(self._data))])        batch_labels = (self._labels[self._batch_id:min(self._batch_id + batch_size, len(self._data))])        batch_seqlen = (self._seqlen[self._batch_id:min(self._batch_id + batch_size, len(self._data))])        self._batch_id = min(self._batch_id + batch_size, len(self._data))        return batch_data, batch_labels, batch_seqlen# seqlen 序列的总长度# seq_max_len 子序列的长度def dynamicRNN(x, seqlen, weights, biases, seq_max_len, n_hidden):    x = tf.unstack(x, seq_max_len, 1)    lstm_cell = tf.contrib.rnn.BasicLSTMCell(n_hidden)    outputs, states = tf.contrib.rnn.static_rnn(lstm_cell, x, dtype=tf.float32, sequence_length=seqlen)    outputs = tf.stack(outputs)    outputs = tf.transpose(outputs, [1, 0, 2])    batch_size = tf.shape(outputs)[0]    index = tf.range(0, batch_size) * seq_max_len + (seqlen - 1)    outputs = tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)    return tf.matmul(outputs, weights['out']) + biases['out']