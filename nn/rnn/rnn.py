import tensorflow as tffrom tensorflow.contrib import rnnimport numpy as npimport randomfrom tensorflow.examples.tutorials.mnist import input_datamnist = input_data.read_data_sets("data", one_hot=True)# Training parameterslearning_rate = 0.001training_steps = 10000batch_size = 128display_step = 200# Network Parametersnum_input = 28timesteps = 28num_hidden = 128num_classes = 10X = tf.placeholder("float", [None, timesteps, num_input])Y = tf.placeholder("float", [None, num_classes])weights = {'out': tf.Variable(tf.random_normal([2 * num_hidden, num_classes]))}biases = {'out': tf.Variable(tf.random_normal([num_classes]))}def BIRNN(x, weights, biases):    x = tf.unstack(x, timesteps, 1)    lstm_fw_cell = rnn.BasicLSTMCell(num_hidden, forget_bias=1.0)    lstm_bw_cell = rnn.BasicLSTMCell(num_hidden, forget_bias=1.0)    try:        outputs, _ = rnn.static_bidirectional_rnn(lstm_fw_cell, lstm_bw_cell, x, dtype=tf.float32)    except Exception: # Old TensorFlow version only returns outputs not states        outputs = rnn.static_bidirectional_rnn(lstm_fw_cell, lstm_bw_cell, x, dtype=tf.float32)    return tf.matmul(outputs[-1], weights['out']) + biases['out']class ToySequenceData(object):    def __init__(self, n_samples=1000, max_seq_len=20, min_seq_len=3, max_value=1000):        self._data = []        self._labels = []        self._seqlen = []        for i in range(n_samples):            len = random.randint(min_seq_len, max_seq_len)            self._seqlen.append(len)            # add a random or linear int sequence            if random.random() < 0.5:                # generate a linear sequence                rand_start = random.randint(0, max_value - len)                s = [[float(i) / max_value] for i in range(rand_start, rand_start + len)]                s += [[0.] for i in range(max_seq_len - len)]                self._data.append(s)                self._labels.append([1., 0.])            else:                # generate a random sequence                s = [[float(random.randint(0, max_value))/max_value] for i in range(len)]                s += [[0.] for i in range(max_seq_len - len)]                self._data.append(s)                self._labels.append([0., 1.])        self._batch_id = 0    def next(self, batch_size):        if self._batch_id == len(self._data):            self._batch_id = 0        batch_data = (self._data[self._batch_id:min(self._batch_id + batch_size, len(self._data))])        batch_labels = (self._labels[self._batch_id:min(self._batch_id + batch_size, len(self._data))])        batch_seqlen = (self._seqlen[self._batch_id:min(self._batch_id + batch_size, len(self._data))])        self._batch_id = min(self._batch_id + batch_size, len(self._data))        return batch_data, batch_labels, batch_seqlendef dynamicRNN(x, seqlen, weights, biases, seq_max_len, n_hidden):    x = tf.unstack(x, seq_max_len, 1)    lstm_cell = tf.contrib.rnn.BasicLSTMCell(n_hidden)    outputs, states = tf.contrib.rnn.static_rnn(lstm_cell, x, dtype=tf.float32, sequence_length=seqlen)    outputs = tf.stack(outputs)    outputs = tf.transpose(outputs, [1, 0,2 ])    batch_size = tf.shape(outputs)[0]    index = tf.range(0, batch_size) * seq_max_len + (seqlen - 1)    outputs = tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)    return tf.matmul(outputs, weights['out']) + biases['out']if __name__ == '__main__':    logits = BIRNN(X, weights, biases)    prediction = tf.nn.softmax(logits)    loss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=Y))    optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)    train_op = optimizer.minimize(loss_op)    correct_pred = tf.equal(tf.argmax(prediction, 1), tf.argmax(Y, 1))    accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))    init = tf.global_variables_initializer()    with tf.Session() as sess:        sess.run(init)        for step in range(1, training_steps + 1):            batch_x, batch_y = mnist.train.next_batch(batch_size)            batch_x = batch_x.reshape((batch_size, timesteps, num_input))            sess.run(train_op, feed_dict={X: batch_x, Y: batch_y})            if step % display_step == 0 or step == 1:                loss, acc = sess.run([loss_op, accuracy], feed_dict={X: batch_x, Y: batch_y})                print("Step {}, Mnibatch Loss = {:.4f}, Training Accuracy = {:.3f}".format(step, loss, acc))        print("Optimization Finished!")        test_len = 128        test_data = mnist.test.image[:test_len].reshape(-1, timesteps, num_input)        test_label = mnist.test.labels[:test_len]        print("Testing Accuracy: ", sess.run(accuracy, feed_dict={X: test_data, Y: test_label}))